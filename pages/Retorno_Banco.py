import streamlit as st
import pandas as pd
import io

st.set_page_config(page_title="Leitor CNAB240 .RET", layout="centered")
st.title("üìÑ Leitor de Arquivo CNAB240 (.RET)")

st.markdown("Fa√ßa o upload de um arquivo `.RET` (CNAB240) para extrair os dados de **pagamentos (Segmento J)** e gerar um arquivo Excel.")

# Estado da sess√£o
if "df_ret" not in st.session_state:
    st.session_state.df_ret = None
if "uploader_key_ret" not in st.session_state:
    st.session_state.uploader_key_ret = 0

codigo_ocorrencias = {
    "00": "Cr√©dito efetuado",
    "01": "Insufici√™ncia de fundos",
    "02": "Cr√©dito cancelado pelo pagador/credor",
    "03": "D√©bito autorizado pela ag√™ncia - efetuado",
    "HA": "Lote n√£o aceito",
    "HB": "Inscri√ß√£o da empresa inv√°lida para o contrato",
    "HC": "Conv√™nio com a empresa inexistente/inv√°lido para o contrato",
    "HD": "Ag√™ncia/conta corrente da empresa inexistente/inv√°lida para o contrato",
    "HE": "Tipo de servi√ßo inv√°lido para o contrato",
    "HF": "Conta-Corrente da Empresa com saldo insuficiente",
    "H4": "Retorno de Cr√©dito n√£o Pago",
    "AA": "Controle inv√°lido",
    "AB": "Tipo de opera√ß√£o inv√°lido",
    "AC": "Tipo de servi√ßo inv√°lido",
    "AD": "Forma de lan√ßamento inv√°lida",
    "AE": "Tipo/n√∫mero de inscri√ß√£o inv√°lido",
    "AF": "C√≥digo do conv√™nio inv√°lido",
    "AG": "Ag√™ncia/conta corrente/Dv inv√°lido",
    "AH": "N√∫mero seq√ºencial do registro do lote inv√°lido",
    "AI": "C√≥digo do Segmento de Detalhe inv√°lido",
    "AJ": "Tipo de movimento inv√°lido",
    "AK": "C√≥digo da c√¢mara de compensa√ß√£o do favorecido inv√°lido",
    "AL": "C√≥digo do Banco Favorecido, Institui√ß√£o de Pagamento ou Deposit√°rio Inv√°lido",
    "AM": "Ag√™ncia mantenedora da conta corrente do favorecido inv√°lida",
    "AN": "Conta Corrente/DV/Conta de Pagamento do Favorecido Inv√°lido",
    "AO": "Nome do favorecido n√£o informado",
    "AP": "Data do lan√ßamento inv√°lida",
    "AQ": "Tipo/quantidade de moeda inv√°lido",
    "AR": "Valor do lan√ßamento inv√°lido",
    "AS": "Aviso ao favorecido - Identifica√ß√£o inv√°lida",
    "AT": "Tipo/n√∫mero de inscri√ß√£o do favorecido inv√°lido",
    "AU": "Logradouro do favorecido n√£o informado",
    "AV": "N√∫mero do local do favorecido n√£o informado",
    "AW": "Cidade do favorecido n√£o informado",
    "AX": "Cep/complemento do favorecido inv√°lido",
    "AY": "Sigla do estado do favorecido inv√°lida",
    "AZ": "C√≥digo/nome do banco deposit√°rio inv√°lido",
    "BA": "C√≥digo/nome da ag√™ncia deposit√°ria n√£o informado",
    "BB": "Seu n√∫mero inv√°lido",
    "BC": "Nosso n√∫mero inv√°lido",
    "BD": "Confirma√ß√£o de pagamento agendado",
    "BE": "C√≥digo do pagamento inv√°lido",
    "BF": "Per√≠odo de compet√™ncia inv√°lido",
    "BG": "M√™s de compet√™ncia inv√°lido",
    "BH": "Ano de compet√™ncia inv√°lido",
    "BI": "Compet√™ncia 13 n√£o pode ser antecipada",
    "BJ": "Identificador de pagamento inv√°lido",
    "BK": "Valor da multa inv√°lido",
    "BL": "Valor m√≠nimo de GPS - R$10,00",
    "BM": "C√≥digo de Opera√ß√£o para o sistema BLV inv√°lido",
    "BN": "STR006 ou TED fora do hor√°rio",
    "BO": "Pagamento em ag√™ncia do mesmo estado do favorecido",
    "BP": "Erro na valida√ß√£o do c√≥digo de barras",
    "BQ": "Inconsist√™ncia do c√≥digo de barras da GPS",
    "CC": "D√≠gito verificador geral inv√°lido",
    "CF": "Valor do Documento Inv√°lido",
    "CI": "Valor de Mora Inv√°lido",
    "CJ": "Valor da Multa Inv√°lido",
    "DD": "Duplicidade de DOC",
    "DT": "Duplicidade de T√≠tulo",
    "TA": "Lote n√£o aceito - totais de lote com diferen√ßa.",
    "XA": "TED Agendada cancelada pelo Piloto.",
    "XC": "TED cancelada pelo Piloto.",
    "XD": "Devolu√ß√£o do SPB.",
    "XE": "Devolu√ß√£o do SPB por erro.",
    "XP": "Devolu√ß√£o do SPB por situa√ß√£o especial.",
    "XR": "Movimento entre contas inv√°lido.",
    "YA": "T√≠tulo n√£o encontrado.",
    "ZA": "Ag√™ncia / Conta do Favorecido substitu√≠do.",
    "ZI": "Benefici√°rio divergente",
    "57": "Diverg√™ncia na indica√ß√£o da ag√™ncia, conta corrente, nome ou CNPJ/CPF do favorecido."
}

def ler_cnab240_segmento_j(conteudo_arquivo):
    registros = []

    for linha in conteudo_arquivo.splitlines():
        if len(linha) >= 150 and linha[13] == 'J':
            nome_favorecido = linha[61:90].strip()
            data_pagamento = linha[91:100]
            valor = linha[101:115].strip()
            codigo_pagamento = linha[230:235].strip()
            descricao_confirmacao = codigo_ocorrencias.get(codigo_pagamento, codigo_pagamento)

            if "0" in nome_favorecido:
                nome_favorecido = nome_favorecido.replace("0", "")

            try:
                data_formatada = f"{data_pagamento[0:2]}/{data_pagamento[2:4]}/{data_pagamento[4:8]}"
                valor_formatado = int(valor) / 100 if valor.isdigit() else 0
            except:
                data_formatada = ""
                valor_formatado = 0

            registros.append({
                'Favorecido': nome_favorecido,
                'Data Pagamento': data_formatada,
                'Valor (R$)': f"{valor_formatado:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."),
                'Codigo':  codigo_pagamento,
                'Descri√ß√£o': descricao_confirmacao
            })

    return pd.DataFrame(registros)

# Uploader com key din√¢mica
uploaded_file = st.file_uploader(
    "üìÅ Envie o arquivo .RET aqui",
    type=["ret", "txt"],
    key=f"uploader_ret_{st.session_state.uploader_key_ret}"
)

# Processamento
if uploaded_file:
    conteudo = uploaded_file.read().decode("utf-8", errors="ignore")
    df = ler_cnab240_segmento_j(conteudo)

    if not df.empty:
        st.success(f"{len(df)} pagamentos encontrados.")
        st.session_state.df_ret = df
    else:
        st.warning("‚ùå Nenhum pagamento (Segmento J) foi encontrado neste arquivo.")

# Exibi√ß√£o
if st.session_state.df_ret is not None:
    st.dataframe(st.session_state.df_ret, use_container_width=True)

    output = io.BytesIO()
    st.session_state.df_ret.to_excel(output, index=False)
    output.seek(0)

    st.download_button(
        label="üì• Baixar Excel",
        data=output,
        file_name="pagamentos_cnab240.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# Bot√£o limpar
if st.session_state.df_ret is not None:
    if st.button("üßπ Limpar Tela"):
        st.session_state.df_ret = None
        st.session_state.uploader_key_ret += 1  # for√ßa reset do uploader
        st.rerun()
